{"version":3,"sources":["../../src/streamlabs.js"],"names":["StreamlabsClient","options","Set","token","emitTests","rawEvents","Error","Array","isArray","Object","assign","baseURL","client","autoConnect","forceNode","forceJSONP","hookEventListeners","createClient","connect","disconnect","event","message","type","idTable","has","_id","add","isTest","emit","isResub","sub_type","months","Number","formattedMonths","amount","formattedAmount","formatted_amount","toString","currency","viewers","formattedViewers","on","forEach","handleEvent","for","error","eventName","hookRawEventListener","data","EventEmitter"],"mappings":"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","file":"streamlabs.js","sourcesContent":["import EventEmitter from 'eventemitter3';\nimport ioClient from 'socket.io-client';\n\nimport { removeCommas, removeNonNumeric } from './helpers';\n\nclass StreamlabsClient extends EventEmitter {\n  baseURL = 'https://sockets.streamlabs.com/?token=';\n  token = null;\n  client = null;\n  rawEvents = [];\n  idTable = new Set();\n\n  constructor (options) {\n    super();\n\n    const {\n      token,\n      emitTests,\n      rawEvents,\n    } = options;\n\n    if (!token || typeof token !== 'string') {\n      throw new Error('StreamlabsClient constructor expected \\'token\\' to be a string with length longer than 0.');\n    }\n\n    if (Array.isArray(rawEvents)) {\n      this.rawEvents = rawEvents;\n    }\n\n    Object.assign(this, {\n      token,\n      emitTests: !!emitTests,\n    });\n  }\n\n  createClient () {\n    const {\n      baseURL,\n      token,\n      client,\n    } = this;\n\n    if (client) {\n      return;\n    }\n\n    this.client = ioClient(baseURL + token, {\n      autoConnect: false,\n      // transports: ['websocket'],\n      forceNode: true,\n      forceJSONP: false,\n      // debug: true,\n    });\n\n    this.hookEventListeners();\n  }\n\n  connect () {\n    if (!this.client) {\n      this.createClient();\n    }\n\n    this.client.connect();\n  }\n\n  disconnect () {\n    if (this.client) {\n      this.client.disconnect();\n    }\n  }\n\n  handleEvent (event) {\n    const { message, type } = event;\n\n\n    // eslint-disable-next-line no-underscore-dangle\n    if (this.idTable.has(message._id)) {\n      return;\n    }\n\n    // eslint-disable-next-line no-underscore-dangle\n    this.idTable.add(message._id);\n\n    if (!this.emitTests && message && message.isTest) {\n      return;\n    }\n\n    const isTest = !!message.isTest;\n\n    switch (type) {\n      case 'follow': {\n        this.emit('follow', {\n          ...message,\n          isTest,\n        });\n\n        break;\n      }\n\n      case 'subscription': {\n        const isResub = !!message.sub_type && message.sub_type === 'resub';\n\n        if (isResub) {\n          this.emit('resubscription', {\n            ...message,\n            months: Number(removeCommas(message.months)) || 0,\n            formattedMonths: message.months,\n            isTest,\n          });\n        } else {\n          this.emit('subscription', {\n            ...message,\n            isTest,\n          });\n        }\n\n        break;\n      }\n\n      case 'donation': {\n        this.emit('donation', {\n          ...message,\n          amount: Number(removeNonNumeric(message.amount)),\n          formattedAmount: (message.formattedAmount || message.formatted_amount || '').toString(),\n          currency: message.currency || 'USD',\n          isTest,\n        });\n\n        break;\n      }\n\n      case 'host': {\n        this.emit('host', {\n          ...message,\n          viewers: Number(removeNonNumeric(message.viewers)),\n          formattedViewers: message.viewers.toString(),\n          isTest,\n        });\n\n        break;\n      }\n\n      case 'bits': {\n        this.emit('bits', {\n          ...message,\n          amount: Number(removeCommas(message.amount)) || 0,\n          formattedAmount: message.amount.toString(),\n          isTest: !!message.isTest,\n        });\n\n        break;\n      }\n\n      default: {\n        this.emit(type, {\n          ...message,\n          isTest,\n        });\n\n        break;\n      }\n    }\n  }\n\n  hookEventListeners () {\n    this.client.on('event', (event) => {\n      try {\n        if (Array.isArray(event.message)) {\n          event.message.forEach((message) => {\n            this.handleEvent({\n              type: event.type,\n              for: event.for || '',\n              message,\n            });\n          });\n        }\n      } catch (error) {\n        this.emit('error', error);\n      }\n    });\n\n    this.rawEvents.forEach((eventName) => {\n      this.hookRawEventListener(eventName);\n    });\n  }\n\n  hookRawEventListener (eventName) {\n    this.client.on(eventName, (...data) => {\n      this.emit(eventName, ...data);\n    });\n  }\n}\n\nexport default StreamlabsClient;\n"]}